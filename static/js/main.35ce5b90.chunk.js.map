{"version":3,"sources":["components/NumberSquare.js","App.js","reportWebVitals.js","index.js"],"names":["NumberSquare","props","square","prime","style","width","height","border","background","textAlign","fontSize","fontFamily","number","App","useState","size","setSize","array","setArray","status","setStatus","className","type","value","onChange","e","target","placeholder","onClick","parseInt","primes","n","a","counter","i","push","Math","sqrt","j","generatePrimes","map","index","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAoBeA,EAlBM,SAACC,GAElB,IAAIC,EAAS,wBAQb,OALIA,EADAD,EAAME,MACG,sBAAKC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,OAAQ,kBAAmBC,WAAY,QAASC,UAAW,SAAUC,SAAU,OAAQC,WAAY,sBAAlJ,cAA4KV,EAAMW,OAAlL,OAEA,sBAAKR,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,OAAQ,kBAAmBE,UAAW,SAAUC,SAAU,OAAQC,WAAY,sBAA7H,cAAuJV,EAAMW,OAA7J,OAIT,8BACKV,KCkFEW,EA3FH,WAEV,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAsCA,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,UAAf,8DAIA,sBAAKA,UAAU,SAAf,UACE,uBAAOC,KAAK,OAAOD,UAAU,YAAYE,MAAOR,EAAMS,SAAU,SAAAC,GAAC,OAAIT,EAAQS,EAAEC,OAAOH,QAAQI,YAAY,cAC1G,wBAAQN,UAAU,kBAAkBO,QArB5B,WACZ,GAA8B,kBAAnBC,SAASd,GAAoB,CACtC,IAAIe,EAxBe,SAACC,GAItB,IAHA,IAAIC,EAAI,GACNC,EAAU,EAEHC,EAAI,EAAGA,GAAKH,EAAGG,IAAKF,EAAEG,MAAK,GAEpCH,EAAE,IAAK,EACPA,EAAE,IAAK,EAEP,IAAK,IAAIE,EAAI,EAAGA,GAAKE,KAAKC,KAAKN,GAAIG,IACjC,IAAa,IAATF,EAAEE,GAAa,CACjBD,EAAU,EACV,IAAK,IAAIK,EAAIJ,EAAIA,EAAGI,GAAKP,EAAGO,EAAKJ,EAAIA,EAAMD,EAAUC,EACnDF,EAAEM,IAAK,EACPL,IAKN,OAAOD,EAKQO,CAAexB,GAC5BG,EAASY,GACTV,GAAU,KAiBR,sBACA,wBAAQC,UAAU,eAAeO,QAdzB,WACZR,GAAU,GACVJ,EAAQ,KAYJ,sBAEF,qBAAKK,UAAU,YAAf,SAEGF,GAAU,qBAAKE,UAAU,OAAf,SACRJ,EAAMuB,KAAI,SAACjB,EAAOkB,GACjB,OAAQ,cAAC,EAAD,CAAc7B,OAAQ6B,EAAOtC,MAAOoB,YAIhDJ,GACA,sBAAKE,UAAU,cAAf,kCACuB,kCADvB,uFACmH,kCADnH,cACsI,kCADtI,gCAEE,uBACA,uBAHF,sWAWE,uBACA,uBAZF,yCAawC,mBAAGqB,KAAK,sDAAR,kBAbxC,yXAeE,uBACA,uBAhBF,SAkBE,uBACA,uBACA,uBApBF,oBCvDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.35ce5b90.chunk.js","sourcesContent":["import React from 'react';\n\nconst NumberSquare = (props) => {\n\n    let square = <div></div>\n\n    if (props.prime) {\n        square = <div style={{ width: '100px', height: '100px', border: '1px solid black', background: 'green', textAlign: 'center', fontSize: '35px', fontFamily: 'Oswald, sans-serif' }}> {props.number} </div>\n    } else {\n        square = <div style={{ width: '100px', height: '100px', border: '1px solid black', textAlign: 'center', fontSize: '35px', fontFamily: 'Oswald, sans-serif' }}> {props.number} </div>\n    }\n\n    return (\n        <div>\n            {square}\n        </div>\n    )\n\n}\n\nexport default NumberSquare;","import './App.css';\nimport React, { useState } from 'react';\nimport NumberSquare from './components/NumberSquare';\n\n\nconst App = () => {\n\n  const [size, setSize] = useState();\n  const [array, setArray] = useState([]);\n  const [status, setStatus] = useState(false);\n\n\n  const generatePrimes = (n) => {\n    let a = [],\n      counter = 0;\n\n    for (let i = 0; i <= n; i++) a.push(true);\n\n    a[0] = false;\n    a[1] = false;\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (a[i] === true) {\n        counter = 0;\n        for (let j = i * i; j <= n; j = (i * i) + (counter * i)) {\n          a[j] = false;\n          counter++;\n        }\n      }\n    }\n\n    return a;\n  };\n\n  const start = () => {\n    if (typeof parseInt(size) === 'number') {\n      let primes = generatePrimes(size);\n      setArray(primes);\n      setStatus(true);\n    }\n  }\n\n  const reset = () => {\n    setStatus(false);\n    setSize(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"headers\">\n        The Sieve of Eratosthenes Prime Number Generator\n      </div>\n      {/* <div className=\"date\">9/17/2021</div> */}\n      <div className=\"inputs\">\n        <input type=\"text\" className=\"input_box\" value={size} onChange={e => setSize(e.target.value)} placeholder=\"Limit (n)\" />\n        <button className=\"generate_button\" onClick={start}>Generate</button>\n        <button className=\"reset_button\" onClick={reset}>Reset</button>\n      </div>\n      <div className=\"container\">\n\n        {status && <div className=\"body\">\n          {array.map((value, index) => {\n            return (<NumberSquare number={index} prime={value} />)\n          })}\n        </div>}\n      </div>\n      {!status &&\n        <div className=\"description\">\n          Enter natural number <i>n</i> into the textbox and click Generate! This will compute all the prime numbers up to <i>n</i>. WARNING: <i>n</i> > 90,000 may crash the site.\n          <br />\n          <br />\n          {/* <br />\n          <br />\n          <br />\n          <br />\n          <br />  */}\n          During my Number Theory course in college, we learned about The Sieve of Eratosthenes. Although simple, I still found this ancient method of computing prime numbers\n          to be a pretty fascinating algorithm. It works by going down the line of numbers, stopping at each, and sending out a second pointer to eliminate all of the multiples of the selected number.\n          <br />\n          <br />\n          A more formal definition can be found <a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">here</a>. Thought it would be fun to code up this quick visualization of the results. I was never the best at math courses, let alone a proof-based math course, but Number Theory was quite memorable and interesting. Shoutout to Professor Luis for being amazing! Even if I don't remember everything from this course in the future, I will at least have this project to look back on :)\n\n          <br />\n          <br />\n          ~Tyler\n          <br />\n          <br />\n          <br />\n          Sept. 2021\n        </div>}\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}